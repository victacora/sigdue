package com.sigdue.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARCHIVO".
*/
public class ArchivoDao extends AbstractDao<Archivo, Long> {

    public static final String TABLENAME = "ARCHIVO";

    /**
     * Properties of entity Archivo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id_archivo = new Property(0, long.class, "id_archivo", true, "ID_ARCHIVO");
        public final static Property Id_predial = new Property(1, Long.class, "id_predial", false, "ID_PREDIAL");
        public final static Property Ruta = new Property(2, String.class, "ruta", false, "RUTA");
    }


    public ArchivoDao(DaoConfig config) {
        super(config);
    }
    
    public ArchivoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARCHIVO\" (" + //
                "\"ID_ARCHIVO\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id_archivo
                "\"ID_PREDIAL\" INTEGER," + // 1: id_predial
                "\"RUTA\" TEXT);"); // 2: ruta
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARCHIVO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Archivo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_archivo());
 
        Long id_predial = entity.getId_predial();
        if (id_predial != null) {
            stmt.bindLong(2, id_predial);
        }
 
        String ruta = entity.getRuta();
        if (ruta != null) {
            stmt.bindString(3, ruta);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Archivo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_archivo());
 
        Long id_predial = entity.getId_predial();
        if (id_predial != null) {
            stmt.bindLong(2, id_predial);
        }
 
        String ruta = entity.getRuta();
        if (ruta != null) {
            stmt.bindString(3, ruta);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Archivo readEntity(Cursor cursor, int offset) {
        Archivo entity = new Archivo( //
            cursor.getLong(offset + 0), // id_archivo
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id_predial
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // ruta
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Archivo entity, int offset) {
        entity.setId_archivo(cursor.getLong(offset + 0));
        entity.setId_predial(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRuta(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Archivo entity, long rowId) {
        entity.setId_archivo(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Archivo entity) {
        if(entity != null) {
            return entity.getId_archivo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Archivo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

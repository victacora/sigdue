package com.sigdue.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PARAMETRO".
*/
public class ParametroDao extends AbstractDao<Parametro, Long> {

    public static final String TABLENAME = "PARAMETRO";

    /**
     * Properties of entity Parametro.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id_parametro = new Property(0, long.class, "id_parametro", true, "ID_PARAMETRO");
        public final static Property Tipo = new Property(1, String.class, "tipo", false, "TIPO");
        public final static Property Valor = new Property(2, String.class, "valor", false, "VALOR");
    }


    public ParametroDao(DaoConfig config) {
        super(config);
    }
    
    public ParametroDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PARAMETRO\" (" + //
                "\"ID_PARAMETRO\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id_parametro
                "\"TIPO\" TEXT," + // 1: tipo
                "\"VALOR\" TEXT);"); // 2: valor
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARAMETRO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Parametro entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_parametro());
 
        String tipo = entity.getTipo();
        if (tipo != null) {
            stmt.bindString(2, tipo);
        }
 
        String valor = entity.getValor();
        if (valor != null) {
            stmt.bindString(3, valor);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Parametro entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_parametro());
 
        String tipo = entity.getTipo();
        if (tipo != null) {
            stmt.bindString(2, tipo);
        }
 
        String valor = entity.getValor();
        if (valor != null) {
            stmt.bindString(3, valor);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Parametro readEntity(Cursor cursor, int offset) {
        Parametro entity = new Parametro( //
            cursor.getLong(offset + 0), // id_parametro
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tipo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // valor
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Parametro entity, int offset) {
        entity.setId_parametro(cursor.getLong(offset + 0));
        entity.setTipo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Parametro entity, long rowId) {
        entity.setId_parametro(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Parametro entity) {
        if(entity != null) {
            return entity.getId_parametro();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Parametro entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

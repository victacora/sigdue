package com.sigdue.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TIPO_SERVICIO".
*/
public class TipoServicioDao extends AbstractDao<TipoServicio, Long> {

    public static final String TABLENAME = "TIPO_SERVICIO";

    /**
     * Properties of entity TipoServicio.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id_tipo_servicio = new Property(0, long.class, "id_tipo_servicio", true, "ID_TIPO_SERVICIO");
        public final static Property Nom_tipo_servicio = new Property(1, String.class, "nom_tipo_servicio", false, "NOM_TIPO_SERVICIO");
    }


    public TipoServicioDao(DaoConfig config) {
        super(config);
    }
    
    public TipoServicioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIPO_SERVICIO\" (" + //
                "\"ID_TIPO_SERVICIO\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id_tipo_servicio
                "\"NOM_TIPO_SERVICIO\" TEXT);"); // 1: nom_tipo_servicio
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIPO_SERVICIO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TipoServicio entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_tipo_servicio());
 
        String nom_tipo_servicio = entity.getNom_tipo_servicio();
        if (nom_tipo_servicio != null) {
            stmt.bindString(2, nom_tipo_servicio);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TipoServicio entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_tipo_servicio());
 
        String nom_tipo_servicio = entity.getNom_tipo_servicio();
        if (nom_tipo_servicio != null) {
            stmt.bindString(2, nom_tipo_servicio);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public TipoServicio readEntity(Cursor cursor, int offset) {
        TipoServicio entity = new TipoServicio( //
            cursor.getLong(offset + 0), // id_tipo_servicio
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // nom_tipo_servicio
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TipoServicio entity, int offset) {
        entity.setId_tipo_servicio(cursor.getLong(offset + 0));
        entity.setNom_tipo_servicio(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TipoServicio entity, long rowId) {
        entity.setId_tipo_servicio(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TipoServicio entity) {
        if(entity != null) {
            return entity.getId_tipo_servicio();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TipoServicio entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.sigdue.db;

import org.greenrobot.greendao.annotation.*;

import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "PARQUEADERO".
 */
@Entity(active = true)
public class Parqueadero {

    @Id
    private long id_parqueadero;
    private String nombre;
    private String direccion;
    private String telefono;
    private String id_municipio;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ParqueaderoDao myDao;

    @ToOne(joinProperty = "id_municipio")
    private Municipio municipio;

    @Generated
    private transient String municipio__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Parqueadero() {
    }

    public Parqueadero(long id_parqueadero) {
        this.id_parqueadero = id_parqueadero;
    }

    @Generated
    public Parqueadero(long id_parqueadero, String nombre, String direccion, String telefono, String id_municipio) {
        this.id_parqueadero = id_parqueadero;
        this.nombre = nombre;
        this.direccion = direccion;
        this.telefono = telefono;
        this.id_municipio = id_municipio;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getParqueaderoDao() : null;
    }

    public long getId_parqueadero() {
        return id_parqueadero;
    }

    public void setId_parqueadero(long id_parqueadero) {
        this.id_parqueadero = id_parqueadero;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getDireccion() {
        return direccion;
    }

    public void setDireccion(String direccion) {
        this.direccion = direccion;
    }

    public String getTelefono() {
        return telefono;
    }

    public void setTelefono(String telefono) {
        this.telefono = telefono;
    }

    public String getId_municipio() {
        return id_municipio;
    }

    public void setId_municipio(String id_municipio) {
        this.id_municipio = id_municipio;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Municipio getMunicipio() {
        String __key = this.id_municipio;
        if (municipio__resolvedKey == null || municipio__resolvedKey != __key) {
            __throwIfDetached();
            MunicipioDao targetDao = daoSession.getMunicipioDao();
            Municipio municipioNew = targetDao.load(__key);
            synchronized (this) {
                municipio = municipioNew;
            	municipio__resolvedKey = __key;
            }
        }
        return municipio;
    }

    @Generated
    public void setMunicipio(Municipio municipio) {
        synchronized (this) {
            this.municipio = municipio;
            id_municipio = municipio == null ? null : municipio.getId_municipio();
            municipio__resolvedKey = id_municipio;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    public String toString() {
        return getId_parqueadero() + ". " + getNombre() + " " + getDireccion() + " ";
    }
    // KEEP METHODS END

}

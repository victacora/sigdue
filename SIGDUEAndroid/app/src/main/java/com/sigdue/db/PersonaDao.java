package com.sigdue.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSONA".
*/
public class PersonaDao extends AbstractDao<Persona, Long> {

    public static final String TABLENAME = "PERSONA";

    /**
     * Properties of entity Persona.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id_persona = new Property(0, long.class, "id_persona", true, "ID_PERSONA");
        public final static Property Propietario = new Property(1, String.class, "propietario", false, "PROPIETARIO");
        public final static Property Placa = new Property(2, String.class, "placa", false, "PLACA");
        public final static Property Login = new Property(3, String.class, "login", false, "LOGIN");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property Id_tipo_identificacion = new Property(5, String.class, "id_tipo_identificacion", false, "ID_TIPO_IDENTIFICACION");
        public final static Property No_identificacion = new Property(6, String.class, "no_identificacion", false, "NO_IDENTIFICACION");
        public final static Property Nombre1 = new Property(7, String.class, "nombre1", false, "NOMBRE1");
        public final static Property Nombre2 = new Property(8, String.class, "nombre2", false, "NOMBRE2");
        public final static Property Apellido1 = new Property(9, String.class, "apellido1", false, "APELLIDO1");
        public final static Property Apellido2 = new Property(10, String.class, "apellido2", false, "APELLIDO2");
        public final static Property Telefono = new Property(11, String.class, "telefono", false, "TELEFONO");
        public final static Property Direccion = new Property(12, String.class, "direccion", false, "DIRECCION");
        public final static Property Tipo = new Property(13, String.class, "tipo", false, "TIPO");
        public final static Property Estado = new Property(14, String.class, "estado", false, "ESTADO");
        public final static Property Id_dispositivo = new Property(15, Long.class, "id_dispositivo", false, "ID_DISPOSITIVO");
        public final static Property Nom_dispositivo = new Property(16, String.class, "nom_dispositivo", false, "NOM_DISPOSITIVO");
        public final static Property Id_municipio = new Property(17, String.class, "id_municipio", false, "ID_MUNICIPIO");
    }

    private DaoSession daoSession;


    public PersonaDao(DaoConfig config) {
        super(config);
    }
    
    public PersonaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSONA\" (" + //
                "\"ID_PERSONA\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id_persona
                "\"PROPIETARIO\" TEXT," + // 1: propietario
                "\"PLACA\" TEXT," + // 2: placa
                "\"LOGIN\" TEXT," + // 3: login
                "\"PASSWORD\" TEXT," + // 4: password
                "\"ID_TIPO_IDENTIFICACION\" TEXT," + // 5: id_tipo_identificacion
                "\"NO_IDENTIFICACION\" TEXT UNIQUE ," + // 6: no_identificacion
                "\"NOMBRE1\" TEXT," + // 7: nombre1
                "\"NOMBRE2\" TEXT," + // 8: nombre2
                "\"APELLIDO1\" TEXT," + // 9: apellido1
                "\"APELLIDO2\" TEXT," + // 10: apellido2
                "\"TELEFONO\" TEXT," + // 11: telefono
                "\"DIRECCION\" TEXT," + // 12: direccion
                "\"TIPO\" TEXT," + // 13: tipo
                "\"ESTADO\" TEXT," + // 14: estado
                "\"ID_DISPOSITIVO\" INTEGER," + // 15: id_dispositivo
                "\"NOM_DISPOSITIVO\" TEXT," + // 16: nom_dispositivo
                "\"ID_MUNICIPIO\" TEXT);"); // 17: id_municipio
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSONA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Persona entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_persona());
 
        String propietario = entity.getPropietario();
        if (propietario != null) {
            stmt.bindString(2, propietario);
        }
 
        String placa = entity.getPlaca();
        if (placa != null) {
            stmt.bindString(3, placa);
        }
 
        String login = entity.getLogin();
        if (login != null) {
            stmt.bindString(4, login);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String id_tipo_identificacion = entity.getId_tipo_identificacion();
        if (id_tipo_identificacion != null) {
            stmt.bindString(6, id_tipo_identificacion);
        }
 
        String no_identificacion = entity.getNo_identificacion();
        if (no_identificacion != null) {
            stmt.bindString(7, no_identificacion);
        }
 
        String nombre1 = entity.getNombre1();
        if (nombre1 != null) {
            stmt.bindString(8, nombre1);
        }
 
        String nombre2 = entity.getNombre2();
        if (nombre2 != null) {
            stmt.bindString(9, nombre2);
        }
 
        String apellido1 = entity.getApellido1();
        if (apellido1 != null) {
            stmt.bindString(10, apellido1);
        }
 
        String apellido2 = entity.getApellido2();
        if (apellido2 != null) {
            stmt.bindString(11, apellido2);
        }
 
        String telefono = entity.getTelefono();
        if (telefono != null) {
            stmt.bindString(12, telefono);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(13, direccion);
        }
 
        String tipo = entity.getTipo();
        if (tipo != null) {
            stmt.bindString(14, tipo);
        }
 
        String estado = entity.getEstado();
        if (estado != null) {
            stmt.bindString(15, estado);
        }
 
        Long id_dispositivo = entity.getId_dispositivo();
        if (id_dispositivo != null) {
            stmt.bindLong(16, id_dispositivo);
        }
 
        String nom_dispositivo = entity.getNom_dispositivo();
        if (nom_dispositivo != null) {
            stmt.bindString(17, nom_dispositivo);
        }
 
        String id_municipio = entity.getId_municipio();
        if (id_municipio != null) {
            stmt.bindString(18, id_municipio);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Persona entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_persona());
 
        String propietario = entity.getPropietario();
        if (propietario != null) {
            stmt.bindString(2, propietario);
        }
 
        String placa = entity.getPlaca();
        if (placa != null) {
            stmt.bindString(3, placa);
        }
 
        String login = entity.getLogin();
        if (login != null) {
            stmt.bindString(4, login);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String id_tipo_identificacion = entity.getId_tipo_identificacion();
        if (id_tipo_identificacion != null) {
            stmt.bindString(6, id_tipo_identificacion);
        }
 
        String no_identificacion = entity.getNo_identificacion();
        if (no_identificacion != null) {
            stmt.bindString(7, no_identificacion);
        }
 
        String nombre1 = entity.getNombre1();
        if (nombre1 != null) {
            stmt.bindString(8, nombre1);
        }
 
        String nombre2 = entity.getNombre2();
        if (nombre2 != null) {
            stmt.bindString(9, nombre2);
        }
 
        String apellido1 = entity.getApellido1();
        if (apellido1 != null) {
            stmt.bindString(10, apellido1);
        }
 
        String apellido2 = entity.getApellido2();
        if (apellido2 != null) {
            stmt.bindString(11, apellido2);
        }
 
        String telefono = entity.getTelefono();
        if (telefono != null) {
            stmt.bindString(12, telefono);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(13, direccion);
        }
 
        String tipo = entity.getTipo();
        if (tipo != null) {
            stmt.bindString(14, tipo);
        }
 
        String estado = entity.getEstado();
        if (estado != null) {
            stmt.bindString(15, estado);
        }
 
        Long id_dispositivo = entity.getId_dispositivo();
        if (id_dispositivo != null) {
            stmt.bindLong(16, id_dispositivo);
        }
 
        String nom_dispositivo = entity.getNom_dispositivo();
        if (nom_dispositivo != null) {
            stmt.bindString(17, nom_dispositivo);
        }
 
        String id_municipio = entity.getId_municipio();
        if (id_municipio != null) {
            stmt.bindString(18, id_municipio);
        }
    }

    @Override
    protected final void attachEntity(Persona entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Persona readEntity(Cursor cursor, int offset) {
        Persona entity = new Persona( //
            cursor.getLong(offset + 0), // id_persona
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // propietario
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // placa
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // login
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // id_tipo_identificacion
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // no_identificacion
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nombre1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // nombre2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // apellido1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // apellido2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // telefono
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // direccion
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // tipo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // estado
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // id_dispositivo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // nom_dispositivo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // id_municipio
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Persona entity, int offset) {
        entity.setId_persona(cursor.getLong(offset + 0));
        entity.setPropietario(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlaca(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLogin(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId_tipo_identificacion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNo_identificacion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNombre1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNombre2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setApellido1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setApellido2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTelefono(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDireccion(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTipo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEstado(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setId_dispositivo(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setNom_dispositivo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setId_municipio(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Persona entity, long rowId) {
        entity.setId_persona(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Persona entity) {
        if(entity != null) {
            return entity.getId_persona();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Persona entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTipoIdentificacionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getMunicipioDao().getAllColumns());
            builder.append(" FROM PERSONA T");
            builder.append(" LEFT JOIN TIPO_IDENTIFICACION T0 ON T.\"ID_TIPO_IDENTIFICACION\"=T0.\"ID_TIPO_IDENTIFICACION\"");
            builder.append(" LEFT JOIN MUNICIPIO T1 ON T.\"ID_MUNICIPIO\"=T1.\"ID_MUNICIPIO\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Persona loadCurrentDeep(Cursor cursor, boolean lock) {
        Persona entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TipoIdentificacion tipoIdentificacion = loadCurrentOther(daoSession.getTipoIdentificacionDao(), cursor, offset);
        entity.setTipoIdentificacion(tipoIdentificacion);
        offset += daoSession.getTipoIdentificacionDao().getAllColumns().length;

        Municipio municipio = loadCurrentOther(daoSession.getMunicipioDao(), cursor, offset);
        entity.setMunicipio(municipio);

        return entity;    
    }

    public Persona loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Persona> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Persona> list = new ArrayList<Persona>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Persona> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Persona> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

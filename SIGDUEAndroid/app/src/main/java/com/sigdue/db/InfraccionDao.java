package com.sigdue.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INFRACCION".
*/
public class InfraccionDao extends AbstractDao<Infraccion, Long> {

    public static final String TABLENAME = "INFRACCION";

    /**
     * Properties of entity Infraccion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id_infraccion = new Property(0, long.class, "id_infraccion", true, "ID_INFRACCION");
        public final static Property Codigo = new Property(1, String.class, "codigo", false, "CODIGO");
        public final static Property Descripcion = new Property(2, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Inmovilizacion = new Property(3, String.class, "inmovilizacion", false, "INMOVILIZACION");
        public final static Property R1 = new Property(4, Long.class, "R1", false, "R1");
        public final static Property R2 = new Property(5, Long.class, "R2", false, "R2");
        public final static Property R3 = new Property(6, Long.class, "R3", false, "R3");
        public final static Property R4 = new Property(7, Long.class, "R4", false, "R4");
        public final static Property R5 = new Property(8, Long.class, "R5", false, "R5");
        public final static Property R6 = new Property(9, Long.class, "R6", false, "R6");
    }


    public InfraccionDao(DaoConfig config) {
        super(config);
    }
    
    public InfraccionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INFRACCION\" (" + //
                "\"ID_INFRACCION\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id_infraccion
                "\"CODIGO\" TEXT UNIQUE ," + // 1: codigo
                "\"DESCRIPCION\" TEXT," + // 2: descripcion
                "\"INMOVILIZACION\" TEXT," + // 3: inmovilizacion
                "\"R1\" INTEGER," + // 4: R1
                "\"R2\" INTEGER," + // 5: R2
                "\"R3\" INTEGER," + // 6: R3
                "\"R4\" INTEGER," + // 7: R4
                "\"R5\" INTEGER," + // 8: R5
                "\"R6\" INTEGER);"); // 9: R6
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INFRACCION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Infraccion entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_infraccion());
 
        String codigo = entity.getCodigo();
        if (codigo != null) {
            stmt.bindString(2, codigo);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(3, descripcion);
        }
 
        String inmovilizacion = entity.getInmovilizacion();
        if (inmovilizacion != null) {
            stmt.bindString(4, inmovilizacion);
        }
 
        Long R1 = entity.getR1();
        if (R1 != null) {
            stmt.bindLong(5, R1);
        }
 
        Long R2 = entity.getR2();
        if (R2 != null) {
            stmt.bindLong(6, R2);
        }
 
        Long R3 = entity.getR3();
        if (R3 != null) {
            stmt.bindLong(7, R3);
        }
 
        Long R4 = entity.getR4();
        if (R4 != null) {
            stmt.bindLong(8, R4);
        }
 
        Long R5 = entity.getR5();
        if (R5 != null) {
            stmt.bindLong(9, R5);
        }
 
        Long R6 = entity.getR6();
        if (R6 != null) {
            stmt.bindLong(10, R6);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Infraccion entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_infraccion());
 
        String codigo = entity.getCodigo();
        if (codigo != null) {
            stmt.bindString(2, codigo);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(3, descripcion);
        }
 
        String inmovilizacion = entity.getInmovilizacion();
        if (inmovilizacion != null) {
            stmt.bindString(4, inmovilizacion);
        }
 
        Long R1 = entity.getR1();
        if (R1 != null) {
            stmt.bindLong(5, R1);
        }
 
        Long R2 = entity.getR2();
        if (R2 != null) {
            stmt.bindLong(6, R2);
        }
 
        Long R3 = entity.getR3();
        if (R3 != null) {
            stmt.bindLong(7, R3);
        }
 
        Long R4 = entity.getR4();
        if (R4 != null) {
            stmt.bindLong(8, R4);
        }
 
        Long R5 = entity.getR5();
        if (R5 != null) {
            stmt.bindLong(9, R5);
        }
 
        Long R6 = entity.getR6();
        if (R6 != null) {
            stmt.bindLong(10, R6);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Infraccion readEntity(Cursor cursor, int offset) {
        Infraccion entity = new Infraccion( //
            cursor.getLong(offset + 0), // id_infraccion
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // codigo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // descripcion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // inmovilizacion
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // R1
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // R2
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // R3
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // R4
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // R5
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // R6
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Infraccion entity, int offset) {
        entity.setId_infraccion(cursor.getLong(offset + 0));
        entity.setCodigo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescripcion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInmovilizacion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setR1(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setR2(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setR3(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setR4(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setR5(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setR6(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Infraccion entity, long rowId) {
        entity.setId_infraccion(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Infraccion entity) {
        if(entity != null) {
            return entity.getId_infraccion();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Infraccion entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

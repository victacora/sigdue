package com.sigdue.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INMOVILIZACION".
*/
public class InmovilizacionDao extends AbstractDao<Inmovilizacion, Long> {

    public static final String TABLENAME = "INMOVILIZACION";

    /**
     * Properties of entity Inmovilizacion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id_inmovilizacion = new Property(0, long.class, "id_inmovilizacion", true, "ID_INMOVILIZACION");
        public final static Property Id_usuario = new Property(1, Long.class, "id_usuario", false, "ID_USUARIO");
        public final static Property Id_vehiculo = new Property(2, Long.class, "id_vehiculo", false, "ID_VEHICULO");
        public final static Property Id_infractor = new Property(3, Long.class, "id_infractor", false, "ID_INFRACTOR");
        public final static Property Propietario_presente = new Property(4, String.class, "propietario_presente", false, "PROPIETARIO_PRESENTE");
        public final static Property No_comparendo = new Property(5, Long.class, "no_comparendo", false, "NO_COMPARENDO");
        public final static Property Id_infraccion = new Property(6, Long.class, "id_infraccion", false, "ID_INFRACCION");
        public final static Property Id_agente = new Property(7, Long.class, "id_agente", false, "ID_AGENTE");
        public final static Property Id_grua = new Property(8, Long.class, "id_grua", false, "ID_GRUA");
        public final static Property Id_zona = new Property(9, Long.class, "id_zona", false, "ID_ZONA");
        public final static Property Id_parqueadero = new Property(10, Long.class, "id_parqueadero", false, "ID_PARQUEADERO");
        public final static Property Fec_ini_inm = new Property(11, java.util.Date.class, "fec_ini_inm", false, "FEC_INI_INM");
        public final static Property Fech_fin_inm = new Property(12, java.util.Date.class, "fech_fin_inm", false, "FECH_FIN_INM");
        public final static Property Observacion = new Property(13, String.class, "observacion", false, "OBSERVACION");
        public final static Property Direccion = new Property(14, String.class, "direccion", false, "DIRECCION");
        public final static Property Estado = new Property(15, String.class, "estado", false, "ESTADO");
        public final static Property Salida_transito = new Property(16, String.class, "salida_transito", false, "SALIDA_TRANSITO");
        public final static Property Salida_parqueadero = new Property(17, String.class, "salida_parqueadero", false, "SALIDA_PARQUEADERO");
        public final static Property Desenganche = new Property(18, String.class, "desenganche", false, "DESENGANCHE");
    }

    private DaoSession daoSession;


    public InmovilizacionDao(DaoConfig config) {
        super(config);
    }
    
    public InmovilizacionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INMOVILIZACION\" (" + //
                "\"ID_INMOVILIZACION\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id_inmovilizacion
                "\"ID_USUARIO\" INTEGER," + // 1: id_usuario
                "\"ID_VEHICULO\" INTEGER," + // 2: id_vehiculo
                "\"ID_INFRACTOR\" INTEGER," + // 3: id_infractor
                "\"PROPIETARIO_PRESENTE\" TEXT," + // 4: propietario_presente
                "\"NO_COMPARENDO\" INTEGER," + // 5: no_comparendo
                "\"ID_INFRACCION\" INTEGER," + // 6: id_infraccion
                "\"ID_AGENTE\" INTEGER," + // 7: id_agente
                "\"ID_GRUA\" INTEGER," + // 8: id_grua
                "\"ID_ZONA\" INTEGER," + // 9: id_zona
                "\"ID_PARQUEADERO\" INTEGER," + // 10: id_parqueadero
                "\"FEC_INI_INM\" INTEGER," + // 11: fec_ini_inm
                "\"FECH_FIN_INM\" INTEGER," + // 12: fech_fin_inm
                "\"OBSERVACION\" TEXT," + // 13: observacion
                "\"DIRECCION\" TEXT," + // 14: direccion
                "\"ESTADO\" TEXT," + // 15: estado
                "\"SALIDA_TRANSITO\" TEXT," + // 16: salida_transito
                "\"SALIDA_PARQUEADERO\" TEXT," + // 17: salida_parqueadero
                "\"DESENGANCHE\" TEXT);"); // 18: desenganche
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INMOVILIZACION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Inmovilizacion entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_inmovilizacion());
 
        Long id_usuario = entity.getId_usuario();
        if (id_usuario != null) {
            stmt.bindLong(2, id_usuario);
        }
 
        Long id_vehiculo = entity.getId_vehiculo();
        if (id_vehiculo != null) {
            stmt.bindLong(3, id_vehiculo);
        }
 
        Long id_infractor = entity.getId_infractor();
        if (id_infractor != null) {
            stmt.bindLong(4, id_infractor);
        }
 
        String propietario_presente = entity.getPropietario_presente();
        if (propietario_presente != null) {
            stmt.bindString(5, propietario_presente);
        }
 
        Long no_comparendo = entity.getNo_comparendo();
        if (no_comparendo != null) {
            stmt.bindLong(6, no_comparendo);
        }
 
        Long id_infraccion = entity.getId_infraccion();
        if (id_infraccion != null) {
            stmt.bindLong(7, id_infraccion);
        }
 
        Long id_agente = entity.getId_agente();
        if (id_agente != null) {
            stmt.bindLong(8, id_agente);
        }
 
        Long id_grua = entity.getId_grua();
        if (id_grua != null) {
            stmt.bindLong(9, id_grua);
        }
 
        Long id_zona = entity.getId_zona();
        if (id_zona != null) {
            stmt.bindLong(10, id_zona);
        }
 
        Long id_parqueadero = entity.getId_parqueadero();
        if (id_parqueadero != null) {
            stmt.bindLong(11, id_parqueadero);
        }
 
        java.util.Date fec_ini_inm = entity.getFec_ini_inm();
        if (fec_ini_inm != null) {
            stmt.bindLong(12, fec_ini_inm.getTime());
        }
 
        java.util.Date fech_fin_inm = entity.getFech_fin_inm();
        if (fech_fin_inm != null) {
            stmt.bindLong(13, fech_fin_inm.getTime());
        }
 
        String observacion = entity.getObservacion();
        if (observacion != null) {
            stmt.bindString(14, observacion);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(15, direccion);
        }
 
        String estado = entity.getEstado();
        if (estado != null) {
            stmt.bindString(16, estado);
        }
 
        String salida_transito = entity.getSalida_transito();
        if (salida_transito != null) {
            stmt.bindString(17, salida_transito);
        }
 
        String salida_parqueadero = entity.getSalida_parqueadero();
        if (salida_parqueadero != null) {
            stmt.bindString(18, salida_parqueadero);
        }
 
        String desenganche = entity.getDesenganche();
        if (desenganche != null) {
            stmt.bindString(19, desenganche);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Inmovilizacion entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId_inmovilizacion());
 
        Long id_usuario = entity.getId_usuario();
        if (id_usuario != null) {
            stmt.bindLong(2, id_usuario);
        }
 
        Long id_vehiculo = entity.getId_vehiculo();
        if (id_vehiculo != null) {
            stmt.bindLong(3, id_vehiculo);
        }
 
        Long id_infractor = entity.getId_infractor();
        if (id_infractor != null) {
            stmt.bindLong(4, id_infractor);
        }
 
        String propietario_presente = entity.getPropietario_presente();
        if (propietario_presente != null) {
            stmt.bindString(5, propietario_presente);
        }
 
        Long no_comparendo = entity.getNo_comparendo();
        if (no_comparendo != null) {
            stmt.bindLong(6, no_comparendo);
        }
 
        Long id_infraccion = entity.getId_infraccion();
        if (id_infraccion != null) {
            stmt.bindLong(7, id_infraccion);
        }
 
        Long id_agente = entity.getId_agente();
        if (id_agente != null) {
            stmt.bindLong(8, id_agente);
        }
 
        Long id_grua = entity.getId_grua();
        if (id_grua != null) {
            stmt.bindLong(9, id_grua);
        }
 
        Long id_zona = entity.getId_zona();
        if (id_zona != null) {
            stmt.bindLong(10, id_zona);
        }
 
        Long id_parqueadero = entity.getId_parqueadero();
        if (id_parqueadero != null) {
            stmt.bindLong(11, id_parqueadero);
        }
 
        java.util.Date fec_ini_inm = entity.getFec_ini_inm();
        if (fec_ini_inm != null) {
            stmt.bindLong(12, fec_ini_inm.getTime());
        }
 
        java.util.Date fech_fin_inm = entity.getFech_fin_inm();
        if (fech_fin_inm != null) {
            stmt.bindLong(13, fech_fin_inm.getTime());
        }
 
        String observacion = entity.getObservacion();
        if (observacion != null) {
            stmt.bindString(14, observacion);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(15, direccion);
        }
 
        String estado = entity.getEstado();
        if (estado != null) {
            stmt.bindString(16, estado);
        }
 
        String salida_transito = entity.getSalida_transito();
        if (salida_transito != null) {
            stmt.bindString(17, salida_transito);
        }
 
        String salida_parqueadero = entity.getSalida_parqueadero();
        if (salida_parqueadero != null) {
            stmt.bindString(18, salida_parqueadero);
        }
 
        String desenganche = entity.getDesenganche();
        if (desenganche != null) {
            stmt.bindString(19, desenganche);
        }
    }

    @Override
    protected final void attachEntity(Inmovilizacion entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Inmovilizacion readEntity(Cursor cursor, int offset) {
        Inmovilizacion entity = new Inmovilizacion( //
            cursor.getLong(offset + 0), // id_inmovilizacion
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id_usuario
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // id_vehiculo
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // id_infractor
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // propietario_presente
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // no_comparendo
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // id_infraccion
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // id_agente
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // id_grua
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // id_zona
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // id_parqueadero
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // fec_ini_inm
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // fech_fin_inm
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // observacion
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // direccion
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // estado
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // salida_transito
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // salida_parqueadero
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // desenganche
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Inmovilizacion entity, int offset) {
        entity.setId_inmovilizacion(cursor.getLong(offset + 0));
        entity.setId_usuario(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setId_vehiculo(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setId_infractor(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setPropietario_presente(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNo_comparendo(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setId_infraccion(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setId_agente(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setId_grua(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setId_zona(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setId_parqueadero(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setFec_ini_inm(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setFech_fin_inm(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setObservacion(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDireccion(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEstado(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSalida_transito(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSalida_parqueadero(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDesenganche(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Inmovilizacion entity, long rowId) {
        entity.setId_inmovilizacion(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Inmovilizacion entity) {
        if(entity != null) {
            return entity.getId_inmovilizacion();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Inmovilizacion entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPersonaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getVehiculoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getPersonaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getInfraccionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getPersonaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T5", daoSession.getGruaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T6", daoSession.getZonasDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T7", daoSession.getParqueaderoDao().getAllColumns());
            builder.append(" FROM INMOVILIZACION T");
            builder.append(" LEFT JOIN PERSONA T0 ON T.\"ID_USUARIO\"=T0.\"ID_PERSONA\"");
            builder.append(" LEFT JOIN VEHICULO T1 ON T.\"ID_VEHICULO\"=T1.\"ID_VEHICULO\"");
            builder.append(" LEFT JOIN PERSONA T2 ON T.\"ID_INFRACTOR\"=T2.\"ID_PERSONA\"");
            builder.append(" LEFT JOIN INFRACCION T3 ON T.\"ID_INFRACCION\"=T3.\"ID_INFRACCION\"");
            builder.append(" LEFT JOIN PERSONA T4 ON T.\"ID_AGENTE\"=T4.\"ID_PERSONA\"");
            builder.append(" LEFT JOIN GRUA T5 ON T.\"ID_GRUA\"=T5.\"ID_GRUA\"");
            builder.append(" LEFT JOIN ZONAS T6 ON T.\"ID_ZONA\"=T6.\"ID_ZONA\"");
            builder.append(" LEFT JOIN PARQUEADERO T7 ON T.\"ID_PARQUEADERO\"=T7.\"ID_PARQUEADERO\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Inmovilizacion loadCurrentDeep(Cursor cursor, boolean lock) {
        Inmovilizacion entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Persona usuario = loadCurrentOther(daoSession.getPersonaDao(), cursor, offset);
        entity.setUsuario(usuario);
        offset += daoSession.getPersonaDao().getAllColumns().length;

        Vehiculo vehiculo = loadCurrentOther(daoSession.getVehiculoDao(), cursor, offset);
        entity.setVehiculo(vehiculo);
        offset += daoSession.getVehiculoDao().getAllColumns().length;

        Persona infractor = loadCurrentOther(daoSession.getPersonaDao(), cursor, offset);
        entity.setInfractor(infractor);
        offset += daoSession.getPersonaDao().getAllColumns().length;

        Infraccion infraccion = loadCurrentOther(daoSession.getInfraccionDao(), cursor, offset);
        entity.setInfraccion(infraccion);
        offset += daoSession.getInfraccionDao().getAllColumns().length;

        Persona agente = loadCurrentOther(daoSession.getPersonaDao(), cursor, offset);
        entity.setAgente(agente);
        offset += daoSession.getPersonaDao().getAllColumns().length;

        Grua grua = loadCurrentOther(daoSession.getGruaDao(), cursor, offset);
        entity.setGrua(grua);
        offset += daoSession.getGruaDao().getAllColumns().length;

        Zonas zona = loadCurrentOther(daoSession.getZonasDao(), cursor, offset);
        entity.setZona(zona);
        offset += daoSession.getZonasDao().getAllColumns().length;

        Parqueadero parqueadero = loadCurrentOther(daoSession.getParqueaderoDao(), cursor, offset);
        entity.setParqueadero(parqueadero);

        return entity;    
    }

    public Inmovilizacion loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Inmovilizacion> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Inmovilizacion> list = new ArrayList<Inmovilizacion>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Inmovilizacion> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Inmovilizacion> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
